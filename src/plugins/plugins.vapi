/* plugins.vapi generated by valac 0.28.1, do not modify. */

namespace Synapse {
	[CCode (cheader_filename = "plugins.h")]
	public class BansheeActions : GLib.Object, Synapse.Activatable, Synapse.ItemProvider, Synapse.ActionProvider {
		public BansheeActions ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class CalculatorPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public CalculatorPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class ChatActions : GLib.Object, Synapse.Activatable, Synapse.ActionProvider {
		public ChatActions ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class ChromiumPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public ChromiumPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class CommandPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public CommandPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class DesktopFilePlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider, Synapse.ActionProvider {
		public DesktopFilePlugin ();
		public signal void load_complete ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class DevhelpPlugin : GLib.Object, Synapse.Activatable, Synapse.ActionProvider {
		public DevhelpPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class DictionaryPlugin : GLib.Object, Synapse.Activatable, Synapse.ActionProvider {
		public DictionaryPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class DirectoryPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public DirectoryPlugin ();
		protected override void constructed ();
		public Synapse.DataSink data_sink { get; construct; }
		public signal void zeitgeist_search_complete (Synapse.ResultSet? rs, uint query_id);
	}
	[CCode (cheader_filename = "plugins.h")]
	public class FileOpPlugin : GLib.Object, Synapse.Activatable, Synapse.ActionProvider {
		public FileOpPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class GnomeBookmarksPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public GnomeBookmarksPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class GnomeScreenSaverPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public GnomeScreenSaverPlugin ();
		public static void lock_screen ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class GnomeSessionPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public GnomeSessionPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class HelloWorldPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public HelloWorldPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class HybridSearchPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public HybridSearchPlugin ();
		protected override void constructed ();
		public Synapse.DataSink data_sink { get; construct; }
		public bool processing_query { get; private set; }
		public signal void zeitgeist_search_complete (Synapse.ResultSet? rs, uint query_id);
	}
	[CCode (cheader_filename = "plugins.h")]
	public class LaunchpadPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public LaunchpadPlugin ();
		public Gtk.Widget create_config_widget ();
		public Synapse.ResultSet? find_for_match (ref Synapse.Query query, Synapse.Match match);
	}
	[CCode (cheader_filename = "plugins.h")]
	public class LocatePlugin : GLib.Object, Synapse.Activatable, Synapse.ActionProvider {
		public LocatePlugin ();
		public async Synapse.ResultSet? locate (Synapse.Query q) throws Synapse.SearchError;
	}
	[CCode (cheader_filename = "plugins.h")]
	public class OpenSearchPlugin : GLib.Object, Synapse.Activatable, Synapse.ActionProvider {
		public OpenSearchPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class PastebinPlugin : GLib.Object, Synapse.Activatable, Synapse.ActionProvider {
		public PastebinPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class PidginPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider, Synapse.ActionProvider {
		public PidginPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class RhythmboxActions : GLib.Object, Synapse.Activatable, Synapse.ItemProvider, Synapse.ActionProvider {
		public RhythmboxActions ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class SelectionPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public SelectionPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class SshPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		protected GLib.File config_file;
		protected GLib.FileMonitor monitor;
		public SshPlugin ();
		public void handle_ssh_config_update (GLib.FileMonitor monitor, GLib.File file, GLib.File? other_file, GLib.FileMonitorEvent event_type);
	}
	[CCode (cheader_filename = "plugins.h")]
	public class SystemManagementPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public SystemManagementPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class TestSlowPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public TestSlowPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class XnoiseActions : GLib.Object, Synapse.Activatable, Synapse.ItemProvider, Synapse.ActionProvider {
		public XnoiseActions ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class ZealDoc : Synapse.ActionMatch {
		public GLib.Regex regex;
		public string scf_bundle_identifier;
		public string scf_bundle_name;
		public ZealDoc (string doc_path);
		public override void do_action ();
		public static string replace_first_occurence (string str, string search, string replace);
		public void update_title (string query);
		public string doc_path { get; construct; }
	}
	[CCode (cheader_filename = "plugins.h")]
	public class ZealPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public ZealPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class ZeitgeistPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public ZeitgeistPlugin ();
		public static GLib.GenericArray<Zeitgeist.Event> create_templates (Synapse.QueryFlags flags);
		public static async void process_results (string query, Zeitgeist.ResultSet events, GLib.Cancellable cancellable, Synapse.ResultSet real_results, bool local_only, bool places_search);
		public Synapse.DataSink data_sink { get; set; }
	}
	[CCode (cheader_filename = "plugins.h")]
	public class ZeitgeistRelated : GLib.Object, Synapse.Activatable, Synapse.ActionProvider {
		public ZeitgeistRelated ();
		public async Synapse.ResultSet? find_related (Synapse.Query q, Synapse.Match m) throws Synapse.SearchError;
	}
	[CCode (cheader_filename = "plugins.h")]
	[DBus (name = "org.freedesktop.ConsoleKit.Manager")]
	public interface ConsoleKitObject : GLib.Object {
		public const string OBJECT_PATH;
		public const string UNIQUE_NAME;
		public abstract async bool can_restart () throws GLib.IOError;
		public abstract async bool can_stop () throws GLib.IOError;
		public abstract void restart () throws GLib.IOError;
		public abstract void stop () throws GLib.IOError;
	}
	[CCode (cheader_filename = "plugins.h")]
	[DBus (name = "org.gnome.ScreenSaver")]
	public interface GnomeScreenSaver : GLib.Object {
		public const string OBJECT_PATH;
		public const string UNIQUE_NAME;
		public abstract async void @lock () throws GLib.IOError;
	}
	[CCode (cheader_filename = "plugins.h")]
	[DBus (name = "org.gnome.SessionManager")]
	public interface GnomeSessionManager : GLib.Object {
		public const string OBJECT_PATH;
		public const string UNIQUE_NAME;
		public abstract bool can_shutdown () throws GLib.IOError;
		public abstract void logout (uint32 mode = 0) throws GLib.IOError;
		public abstract void request_reboot () throws GLib.IOError;
		public abstract void shutdown () throws GLib.IOError;
	}
	[CCode (cheader_filename = "plugins.h")]
	[DBus (name = "org.freedesktop.login1.Manager")]
	public interface SystemdObject : GLib.Object {
		public const string OBJECT_PATH;
		public const string UNIQUE_NAME;
		public abstract string can_hibernate () throws GLib.IOError;
		public abstract string can_power_off () throws GLib.IOError;
		public abstract string can_reboot () throws GLib.IOError;
		public abstract string can_suspend () throws GLib.IOError;
		public abstract void hibernate (bool interactive) throws GLib.IOError;
		public abstract void power_off (bool interactive) throws GLib.IOError;
		public abstract void reboot (bool interactive) throws GLib.IOError;
		public abstract void suspend (bool interactive) throws GLib.IOError;
	}
	[CCode (cheader_filename = "plugins.h")]
	[DBus (name = "org.freedesktop.UPower")]
	public interface UPowerObject : GLib.Object {
		public const string OBJECT_PATH;
		public const string UNIQUE_NAME;
		public abstract async void about_to_sleep () throws GLib.IOError;
		public abstract async void hibernate () throws GLib.IOError;
		public abstract async bool hibernate_allowed () throws GLib.IOError;
		public abstract async void suspend () throws GLib.IOError;
		public abstract async bool suspend_allowed () throws GLib.IOError;
	}
}
